---
title: "Good Workflow Practices for Reproducible Data Science"
author: "Dr. Mine Dogucu"
execute:
  echo: true
format: 
  revealjs:
    footer: "[introdata.science](https://introdata.science)"
    slide-number: true
    incremental: true
    theme: ["../templates/slide-style.scss"]
    logo: "https://www.introdata.science/img/logo.png"
    title-slide-attributes: 
      data-background-image: "https://www.introdata.science/img/logo.png"
      data-background-size: 5%
      data-background-position: 50% 85%
    include-after-body: "../templates/clean_title_page.html"
---

## Naming files

::: {.nonincremental}

Three principles of naming files 

- machine readable
- human readable
- plays well with default ordering (e.g. alphabetical and numerical ordering)

(Jenny Bryan)

for the purposes of this course an additional principle is that file names follow

- tidyverse style (all lower case letters, words separated by HYPHEN)

:::

## README.md

- README file is the first file users read. In our case a user might be our future self, a teammate, or (if open source) anyone.



- There can be multiple README files within a single directory: e.g. for the general project folder and then for a data subfolder. Data folder README's can possibly contain codebook (data dictionary).



- It should be brief but detailed enough to help user navigate. 

##

- a README should be up-to-date (can be updated throughout a project's lifecycle as needed).



- On GitHub we use markdown for README file (`README.md`). Good news: [emojis are supported.](https://gist.github.com/rxaviers/7360908)



## README examples

- [STATS 6 website](https://github.com/stats6-fa23/website)
- [Museum of Modern Art Collection](https://github.com/MuseumofModernArt/collection)
- [R package bayesrules](https://github.com/bayes-rules/bayesrules)

## R Packages

__Default__

```{r echo=FALSE, out.width='60%'}
knitr::include_graphics('img/office-suite-default.png')
```



Microsoft products have Copyright. Images used based on [fair use](https://www.microsoft.com/en-us/legal/copyright/default.aspx) for educational purposes.

## R Packages

__Optional__

```{r echo=FALSE, out.width='60%'}
knitr::include_graphics('img/office-suite-optional.png')
```


## R packages


- When you download R, you actually download base R. 



- But there are MANY optional packages you can download.


- Good part: There is an R package for (almost) everything, from complex statistical modeling packages to baby names.



- Bad part: At the beginning it can feel overwhelming. 

- All this time we have actually been using R packages. 


## R packages

What do R packages have? All sorts of things but mainly

- functions 

- datasets



## Exercise

Refer back to older slides and identify the packages for each of the functions we commonly use in this class. 

## Importing .csv Data 


```{r}
#| echo: true
#| eval: false
readr::read_csv("dataset.csv")
```


## Importing Excel Data

```{r}
#| echo: true
#| eval: false
readxl::read_excel("dataset.xlsx")
```


## Importing Excel Data

```{r}
#| echo: true
#| eval: false
readxl::read_excel("dataset.xlsx", sheet = 2)
```


## Importing SAS, SPSS, Stata Data

```{r}
#| echo: true
#| eval: false
library(haven)
# SAS
read_sas("dataset.sas7bdat")
# SPSS
read_sav("dataset.sav")
# Stata
read_dta("dataset.dta")
```


## Where is the dataset file?

Importing data will depend on where the dataset is on your computer. However we use the help of `here::here()` function. 
This function sets the working directory to the project folder (i.e. where the `.Rproj` file is).

```{r}
#| echo: true
#| eval: false
read_csv(here::here("data/dataset.csv"))
```

## Collaboration on GitHub

```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.002.jpeg")
```

## Collaboration on GitHub


```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.003.jpeg")
```

## Collaboration on GitHub


```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.004.jpeg")
```

## Collaboration on GitHub


```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.005.jpeg")
```

## Collaboration on GitHub


```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.006.jpeg")
```

## Collaboration on GitHub

```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.007.jpeg")
```

## Collaboration on GitHub


```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.008.jpeg")
```

## Collaboration on GitHub

If each change is made by one collaborator at a time, this would not be an efficient workflow. 

## Collaboration on GitHub


```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.009.jpeg")
```

## Collaboration on GitHub


```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.010.jpeg")
```

## Collaboration on GitHub

```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.011.jpeg")
```

## Collaboration on GitHub

1 - commit

2 - pull (very important)

3 - push


## Collaboration on GitHub


```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.013.jpeg")
```


## Collaboration on GitHub


```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.014.jpeg")
```


## Collaboration on GitHub


```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.015.jpeg")
```


## Opening an issue

```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/create-issue.png")
```

We can create an **issue** to keep a list of mistakes to be fixed, ideas to check with teammates, or note a to-do task. You can assign tasks to yourself or teammates. 

## Closing an issue

```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/issue-number.png")
```

If you are working on an issue, it makes sense to refer to issue number in your commit message (e.g. "add first draft of alternate texts for #4"). 
If your commit resolves the issue then you can use key words such as "fixes #4" or "closes #4" to close the issue. 
Issues can also be manually closed.

## .gitignore

A .gitignore file contains the list of files which Git has been explicitly told to ignore.

For instance README.html can be git ignored.

You may consider git ignoring confidential files (e.g. some datasets) so that they would not be pushed by mistake to GitHub.

A file can be git ignored either by point-and-click using RStudio's Git pane or by adding the file path to the .gitignore file. For instance weather.csv data file in a data folder need to be added as data/weather.csv

Files with certain files (e.g. all .log files) can also be ignored. See git ignore patterns.

##

It is also a good practice to save session information as package versions change, in order to be able to reproduce results from an analysis we need to know under what technical conditions the analysis was conducted.

```{r}
#| echo: true
sessionInfo()
```



